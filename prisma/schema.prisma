// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // Using environment variables in Snipe-IT style
  url      = env("DATABASE_URL") // Will be constructed from DB_* variables
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String   // Hashed password
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AttendeeGroup {
  id           Int               @id @default(autoincrement())
  name         String
  department   String
  emails       Json             // Store as JSON array
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  categories   ProductCategory[] @relation("CategoryGroups")
}

model ProductCategory {
  id             Int            @id @default(autoincrement())
  name           String
  requiredGroups AttendeeGroup[] @relation("CategoryGroups")
  meetings       Meeting[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Meeting {
  id          Int             @id @default(autoincrement())
  title       String
  description String?         @db.Text
  startTime   DateTime
  endTime     DateTime
  category    ProductCategory @relation(fields: [categoryId], references: [id])
  categoryId  Int
  attendees   Json           // Store as JSON array
  documents   Json?          // Store document metadata as JSON
  status      MeetingStatus  @default(SCHEDULED)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

enum MeetingStatus {
  SCHEDULED
  CANCELLED
  COMPLETED
}
